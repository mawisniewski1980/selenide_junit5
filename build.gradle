plugins {
    id 'java'
    id 'maven-publish'
}

String title = ">>>> Test with Selenide and JUnit5"
println title

group = 'com.selenide.tests'
version = '1.0-SNAPSHOT'

[compileJava, compileTestJava]*.options.collect {options -> options.encoding = 'UTF-8'}
[compileJava, compileTestJava]*.options.collect {options -> options.debug = true}
[compileJava, compileTestJava]*.sourceCompatibility = 1.8
[compileJava, compileTestJava]*.targetCompatibility = 1.8


repositories {
    mavenLocal()
    maven {
        url = 'http://repo.maven.apache.org/maven2'
    }
}

ext {
    selenideVersion = '5.4.1'
    junitVersion = '5.5.2'
    assertjVersion = '3.12.2'
    slf4jVersion = '1.7.28'
    logbackClassicVersion = '1.2.3'
}

dependencies {
    compile "com.codeborne:selenide:${selenideVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testCompile "org.assertj:assertj-core:${assertjVersion}"
    testCompile "org.slf4j:jul-to-slf4j:${slf4jVersion}"
    testCompile "ch.qos.logback:logback-classic:${logbackClassicVersion}"
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

defaultTasks 'clean', 'test'

clean {
    delete('out', 'build', 'logs')
    followSymlinks = true
}

test {

    systemProperties System.properties

    //jvmArgs '-Xms128m', '-Xmx1024m', '-XX:MaxPermSize=128m'
    
    useJUnitPlatform {

        if(getSystemProperties().get("part") != null) {
            String partProp = getSystemProperties().get("part")
            println "TAGS[" + partProp + "]"
            
            if(partProp.equalsIgnoreCase("profile")) {
             includeTags("profile")
             excludeTags("login")
            
            } else if (partProp.equalsIgnoreCase("login")) {
             includeTags("login")
             excludeTags("profile")
             
            } else {
               println 'SOMETHING WRONG - SIC!!!!'
            }
            
        } else {
            println 'SOMETHING WRONG - SIC!!!!'
        }

    }

    dependsOn 'cleanTest'

    testLogging.showStandardStreams = true

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }


    /*maxParallelForks = 4
    testLogging.showStandardStreams = true
    systemProperties['testProtocol'] = 'http'
    systemProperties['testDomain'] = 'djangofan.github.io'
    systemProperties['testPort'] = 80
    systemProperties['testUri'] = '/html-test-site/site'
    systemProperties['hubUrl'] = 'localhost'
    systemProperties['hubPort'] = '4444'*/

}


jar {
/*
    archiveBaseName = "selenide_junit5_gradle"
   
    manifest {
        attributes 'Implementation-Title' : title,
                   'Implementation-Version' : version,
                    'Created-By' : 'mawisniewski1980',
                    'Main-Class' : 'com.selenide.tests'
    }

    from {
      project.configurations.runtimeClasspath.collect {File file -> project.zipTree(file)}      
    }
    
    println ">>>> basename: $archiveBaseName"
    println ">>>> manifest: $manifest.attributes"*/

}
